FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04
# FROM nvidia/cuda:9.2-cudnn7-devel-ubuntu16.04

MAINTAINER Luke Kulik

RUN apt-get update && apt-get install -y --no-install-recommends \
        software-properties-common

# Add Python 3 repo
RUN add-apt-repository ppa:deadsnakes/ppa

# Add GDAL 2.2 repo
RUN add-apt-repository ppa:ubuntugis/ubuntugis-unstable

RUN apt-get update && apt-get install -y --no-install-recommends \  
# Essential Linux utilities
        build-essential \
        pkg-config \
        vim \
        rsync \
        tmux \
        htop \
        unzip \
        unrar \
        curl \
        wget \
        git \
        watch \
        sshfs \
# "Compilers"
        cmake \
        gfortran\
        g++ \
        python \
        python-dev \
        python3.6 \
        python3.6-dev
# Linear Algebra accelerators 
        libopenblas-dev \
        liblapacke-dev
	libtbb-dev \
	libeigen3-dev \
# Graphical interface
        libgtk2.0-dev \
# Video I/O
	libavcodec-dev \
        libavformat-dev \
	libswscale-dev \
        libv4l-dev\
	libtheora-dev \
	libvorbis-dev \
	libxvidcore-dev \
	libx264-dev \
# Media I/O
	libjpeg-turbo8-dev\ 
        libtiff5-dev \
	libopenexr-dev \
        libjasper-dev \
	libgdal-dev \ 
        libpng12-dev \
	libnetcdf-dev \
        libhdf5-dev \	
# Media processing
	ffmpeg \
# Fonts
        libfreetype6-dev \
# Messaging kernel
        libzmq3-dev \	
        && \
    apt-get clean && \
    apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*

# Link BLAS library to use OpenBLAS using the alternatives mechanism (https://www.scipy.org/scipylib/building/linux.html#debian-ubuntu)
RUN update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3 
    
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.5 1 # ?
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 2 # ?
RUN update-alternatives --config python3

RUN curl -O https://bootstrap.pypa.io/get-pip.py && \
	python3 get-pip.py && \
	python get-pip.py && \
	rm get-pip.py
    
RUN pip --no-cache-dir install \
        ipykernel \
        jupyter \
        jupyterlab \
        pillow-simd \
        matplotlib \
        numpy \
        scipy \
        sklearn \
        pandas \
        bcolz \
        futures \
        keras \
        theano \
        h5py \
        awscli \
        h5netcdf \
        Cython \
        netCDF4 \
        scikit-image \
        torch \
        torchvision \
        tensorflow-gpu==1.7.0 \
        tensorboardX \
        http://github.com/matplotlib/basemap/archive/v1.1.0.zip \
        seashells \
        && \
    python -m ipykernel.kernelspec
    
RUN pip3 --no-cache-dir install \
        ipykernel \
        jupyter \
        jupyterlab \
        pillow-simd \
        matplotlib \
        numpy \
        scipy \
        sklearn \
        pandas \
        bcolz \
        futures \
        h5py \
        awscli \
        h5netcdf \
        Cython \
        netCDF4 \
        scikit-image \
        torch \
        torchvision \
        tensorflow-gpu==1.7.0 \
        keras \
        theano \
        tensorboardX \
        http://github.com/matplotlib/basemap/archive/v1.1.0.zip \
        seashells \
        && \
    python3 -m ipykernel.kernelspec
    
# Install OpenCV
RUN git clone --depth 1 https://github.com/opencv/opencv.git /root/opencv && \
	cd /root/opencv && \
	mkdir build && \
	cd build && \
	cmake -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/usr/local -DWITH_CUDA=ON -DENABLE_FAST_MATH=1 \
    	-DCUDA_FAST_MATH=1 -D WITH_CUBLAS=1 -DWITH_QT=OFF -DWITH_OPENGL=ON -DFORCE_VTK=OFF \
	-DWITH_TBB=ON -DWITH_GDAL=ON -DWITH_XINE=OFF -DBUILD_EXAMPLES=OFF .. && \
	make -j"$(nproc)"  && \
	make install && \
	ldconfig && \
	echo 'ln /dev/null /dev/raw1394' >> ~/.bashrc && \
	rm -rf /root/opencv
	
# Install GDAL 2.2
RUN pip3 --no-cache-dir install --global-option=build_ext --global-option="-I/usr/include/gdal/" \
        GDAL==`gdal-config --version` \
        && \
    python3 -m ipykernel.kernelspec
        
# Clone libgpuarray repo and move into it
RUN cd /root && git clone https://github.com/Theano/libgpuarray.git && cd libgpuarray && \
  mkdir Build && cd Build && \
  cmake .. -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/usr && \
  make -j"$(nproc)" && \
  make install
  
# Install pygpu
RUN cd /root/libgpuarray && \
  python3 setup.py build_ext -L /usr/lib -I /usr/include && \
  python3 setup.py install
  
# Set up our notebook config.
COPY jupyter_notebook_config.py /root/.jupyter/

# Jupyter has issues with being run directly:
#   https://github.com/ipython/ipython/issues/7062
# We just add a little wrapper script.
COPY run_jupyter.sh /

# Set up .theanorc for CUDA and OpenBLAS
RUN echo "[global]\ndevice=gpu\nfloatX=float32\noptimizer_including=cudnn\nmode=FAST_RUN \
		\n[lib]\ncnmem=0.95 \
		\n[nvcc]\nfastmath=True \
		\n[blas]\nldflag = -L/usr/lib/openblas-base -lopenblas \
		\n[DebugMode]\ncheck_finite=1" \ > /root/.theanorc

# TensorBoard
EXPOSE 6006
# IPython
EXPOSE 8888

WORKDIR "/workspace"
# start jupyter automaticall here? CMD?
