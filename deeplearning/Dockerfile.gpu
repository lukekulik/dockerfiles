FROM nvidia/cuda:10.0-cudnn7-devel-ubuntu18.04

MAINTAINER Luke Kulik

RUN apt-get update && apt-get install -y --no-install-recommends \
        software-properties-common

# Add Python 3 repo
RUN add-apt-repository ppa:deadsnakes/ppa

# Add GDAL 2.2 repo
RUN add-apt-repository ppa:ubuntugis/ubuntugis-unstable

RUN apt-get update && apt-get install -y --no-install-recommends \  
# Essential Linux utilities
        build-essential \
        pkg-config \
        vim \
        rsync \
        tmux \
	screen \
        htop \
        unzip \
        unrar \
        curl \
        wget \
        git \
	man \
        watch \
        sshfs \
	cpio \
# "Compilers"
        cmake \
        gfortran\
	gcc \
        g++ \
        python \
        python-dev \
	python3.6 \
	python3.6-dev \
     #   python3.7 \ - blocked by pyproj
    #    python3.7-dev \
# Linear Algebra accelerators 
        libopenblas-dev \
        liblapacke-dev \
	libtbb-dev \
	libeigen3-dev \
# Graphical interface
        libgtk2.0-dev \
# Video I/O
	libavcodec-dev \
        libavformat-dev \
	libswscale-dev \
        libv4l-dev \
	libtheora-dev \
	libvorbis-dev \
	libxvidcore-dev \
	libx264-dev \
# Media I/O
	libjpeg-turbo8-dev \ 
        libtiff5-dev \
	libopenexr-dev \
	libgdal-dev \ 
        libpng-dev \
	libnetcdf-dev \
        libhdf5-dev \	
	libbz2-dev \
# Media processing
	ffmpeg \
# Fonts
        libfreetype6-dev \
# Messaging kernel
        libzmq3-dev \	
        && \
# Fix OpenBLAS packaging bug for OpenCV (https://github.com/opencv/opencv/issues/9953)
#    cp /usr/include/lapacke*.h /usr/include/openblas && \
# Clean-up
    apt-get clean && \
    apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*
    
# Install MKL
RUN cd /tmp && \
  wget http://registrationcenter-download.intel.com/akdlm/irc_nas/tec/15275/l_mkl_2019.3.199.tgz && \
  tar -xzf l_mkl_2019.3.199.tgz && \
  cd l_mkl_2019.3.199 && \
  sed -i 's/ACCEPT_EULA=decline/ACCEPT_EULA=accept/g' silent.cfg && \
  sed -i 's/ARCH_SELECTED=ALL/ARCH_SELECTED=INTEL64/g' silent.cfg && \
  sed -i 's/COMPONENTS=DEFAULTS/COMPONENTS=;intel-comp-l-all-vars__noarch;intel-comp-nomcu-vars__noarch;intel-openmp__x86_64;intel-tbb-libs__x86_64;intel-mkl-common__noarch;intel-mkl-installer-license__noarch;intel-mkl-core__x86_64;intel-mkl-core-rt__x86_64;intel-mkl-doc__noarch;intel-mkl-doc-ps__noarch;intel-mkl-gnu__x86_64;intel-mkl-gnu-rt__x86_64;intel-mkl-common-ps__noarch;intel-mkl-core-ps__x86_64;intel-mkl-common-c__noarch;intel-mkl-core-c__x86_64;intel-mkl-common-c-ps__noarch;intel-mkl-tbb__x86_64;intel-mkl-tbb-rt__x86_64;intel-mkl-gnu-c__x86_64;intel-mkl-common-f__noarch;intel-mkl-core-f__x86_64;intel-mkl-gnu-f-rt__x86_64;intel-mkl-gnu-f__x86_64;intel-mkl-f95-common__noarch;intel-mkl-f__x86_64;intel-mkl-psxe__noarch;intel-psxe-common__noarch;intel-psxe-common-doc__noarch;intel-compxe-pset/g' silent.cfg && \
  ./install.sh -s silent.cfg && \
  cd .. && rm -rf * && \
  rm -rf /opt/intel/.*.log /opt/intel/compilers_and_libraries_2019.1.144/licensing && \
  echo "/opt/intel/mkl/lib/intel64" >> /etc/ld.so.conf.d/intel.conf && \
  ldconfig && \
  echo "source /opt/intel/mkl/bin/mklvars.sh intel64" >> /etc/bash.bashrc

# Link BLAS library to use OpenBLAS using the alternatives mechanism (https://www.scipy.org/scipylib/building/linux.html#debian-ubuntu)
#RUN update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3 
    
# Select default Python 3 (Higher priority to Python 3.6)
#RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 1
#RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 2 
#RUN update-alternatives --config python3

RUN curl -O https://bootstrap.pypa.io/get-pip.py && \
	python3 get-pip.py && \
	python get-pip.py && \
	rm get-pip.py
	
# Install numpy with MKL (for Intel CPU)
RUN pip install Cython
RUN pip3 install Cython

# Fix locale
RUN echo "LC_ALL=en_US.UTF-8" >> /etc/environment && \
    echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen && \
    echo "LANG=en_US.UTF-8" > /etc/locale.conf && \
    apt-get clean && apt-get -y update && apt-get install -y locales

RUN cd /tmp && \
 git clone -b v1.16.4 --depth 1 https://github.com/numpy/numpy.git numpy && \
 cd numpy && \
 touch site.cfg && \
 echo "[mkl]" >> site.cfg && \
 echo "include_dirs = /opt/intel/mkl/include/intel64/" >> site.cfg && \
 echo "library_dirs = /opt/intel/mkl/lib/intel64/" >> site.cfg && \
 echo "mkl_libs = mkl_rt, mkl_def, mkl_intel_lp64, mkl_gnu_thread, mkl_core, mkl_mc3" >> site.cfg && \
 echo "lapack_libs = mkl_def, mkl_intel_lp64, mkl_gnu_thread, mkl_core, mkl_mc3" >> site.cfg && \
 CFLAGS='-fopenmp -O3 -march=core2 -ftree-vectorize' LDFLAGS='-lm -lpthread -lgomp' python3 setup.py build --fcompiler=gnu95 && \
 CFLAGS='-fopenmp -O3 -march=core2 -ftree-vectorize' LDFLAGS='-lm -lpthread -lgomp' python3 setup.py install && \
 cd .. && \
 rm -rf *


# h5py needs to be installed after netCDF4 for compatibility
RUN pip --no-cache-dir install \
        ipykernel \
	scipy \
        jupyter \
        jupyterlab \
        pillow-simd \
        matplotlib \
	ggplot \
        sklearn \
        pandas \
        bcolz \
        futures \
        awscli \
	netCDF4 \
	h5netcdf \
	h5py \
        scikit-image \
        keras \
        theano \
        https://github.com/matplotlib/basemap/archive/v1.2.0rel.zip \
        seashells \
	tqdm \
	imageio\
	cartopy \
	regionmask \
        && \
    python -m ipykernel.kernelspec
    
RUN pip3 --no-cache-dir install \
        ipykernel \
	scipy \
        jupyter \
        jupyterlab \
        pillow-simd \
        matplotlib \
	ggplot \
        sklearn \
        pandas \
        bcolz \
        futures \
        awscli \
	netCDF4 \
	h5netcdf \
	h5py \
	scikit-image \
        keras \
        theano \
        https://github.com/matplotlib/basemap/archive/v1.2.0rel.zip \
	seashells \
	tqdm \
	imageio \
	cartopy \
	regionmask \
        && \
    python3 -m ipykernel.kernelspec
	
# Fix gg-plot / pandas compatibility issue
RUN cd /usr/local/lib/python3.6/dist-packages/ggplot/stats && \
	sed -i 's/pandas.lib/pandas/g' smoothers.py
	
# Fix matplotlib to run headless
RUN mkdir -p /root/.config/matplotlib && \
    echo "backend : Agg" > /root/.config/matplotlib/matplotlibrc

# Install GDAL 2.2
RUN pip3 --no-cache-dir install --global-option=build_ext --global-option="-I/usr/include/gdal/" \
        GDAL==`gdal-config --version` \
        && \
    python3 -m ipykernel.kernelspec
    
# Install Boost
RUN cd /tmp && \
 wget http://downloads.sourceforge.net/project/boost/boost/1.59.0/boost_1_59_0.tar.bz2 && \
 tar xvf boost_1_59_0.tar.bz2 && rm -rf boost_1_59_0.tar.bz2 && \ 
 cd boost_1_59_0 && \
 ./bootstrap.sh --with-python=python3.6 \
 ./b2 -j8 install cxxflags="-I/usr/include/python3.6m"
 
# Install NumpyBoost
RUN cd /tmp && \
git clone https://github.com/ndarray/Boost.NumPy.git && \
cd Boost.NumPy && mkdir build && cd build && \
cmake -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so -DPYTHON_EXECUTABLE=/usr/bin/python3 ../ && \
make install

############## GPU specific ###############

# Install OpenCV with CUDA support (compiles for Quadro P6000 (6.1, Pascal) architecture only)
RUN git clone -b 3.4.1 --depth 1 https://github.com/opencv/opencv.git /root/opencv && \
	cd /root/opencv && \
	mkdir build && \
	cd build && \
	cmake -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/usr/local -DWITH_CUDA=ON -DENABLE_FAST_MATH=1 \
    	-DCUDA_FAST_MATH=1 -D WITH_CUBLAS=1 -DWITH_QT=OFF -DWITH_OPENGL=ON -DFORCE_VTK=OFF \
	-DWITH_TBB=OFF -DWITH_MKL=ON -DMKL_USE_MULTITHREAD=OFF -DMKL_WITH_TBB=OFF -DWITH_IPP=ON -DWITH_GDAL=ON \
	-DWITH_XINE=OFF -DBUILD_EXAMPLES=OFF -DCUDA_ARCH_PTX="" -DCUDA_ARCH_BIN="6.1" .. && \
	make -j"$(nproc)"  && \
	make install && \
	ldconfig && \
	echo 'ln /dev/null /dev/raw1394' >> ~/.bashrc && \
	rm -rf /root/opencv
		
RUN pip --no-cache-dir install \
	https://download.pytorch.org/whl/cu100/torch-1.0.0-cp27-cp27mu-linux_x86_64.whl  \
        torchvision \
# Tensorflow GPU not currently available due to CUDA9.1 incompatibility
        tensorflow==1.5.0 \
        tensorboardX

RUN pip3 --no-cache-dir install \
	https://download.pytorch.org/whl/cu100/torch-1.0.0-cp36-cp36m-linux_x86_64.whl \
        torchvision \
# Tensorflow GPU not currently available due to CUDA9.1 incompatibility
        tensorflow==1.5.0 \
        tensorboardX
	  
# Clone libgpuarray repo and move into it
RUN cd /root && git clone https://github.com/Theano/libgpuarray.git && cd libgpuarray && \
  mkdir Build && cd Build && \
  cmake .. -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/usr && \
  make -j"$(nproc)" && \
  make install
  
# Install pygpu
RUN cd /root/libgpuarray && \
  python3 setup.py build_ext -L /usr/lib -I /usr/include && \
  python3 setup.py install && \
  rm -rf /root/libgpuarray

# Set up .theanorc for CUDA and OpenBLAS
RUN echo "[global]\ndevice=gpu\nfloatX=float32\noptimizer_including=cudnn\nmode=FAST_RUN \
		\n[lib]\ncnmem=0.95 \
		\n[nvcc]\nfastmath=True \
		\n[blas]\nldflag = -L/usr/lib/openblas-base -lopenblas \
		\n[DebugMode]\ncheck_finite=1" \ > /root/.theanorc
		
############ End GPU specific ##############

# Set up our notebook config.
RUN echo "Generating self-signed certificate" && \
	mkdir -p /etc/ssl && \
	cd /etc/ssl && \
	# Generating signing SSL private key
	openssl genrsa -passout pass:x -out key.pem 2048 && \
	# Removing passphrase from private key
	cp key.pem key.pem.orig && \
	openssl rsa -passin pass:x -in key.pem.orig -out key.pem && \
	# Generating certificate signing request
	openssl req -new -key key.pem -out cert.csr -subj "/C=GB/ST=GB/L=London/O=UK Trade & Investment/OU=Digital/CN=default" && \
	# Generating self-signed certificate
	openssl x509 -req -days 3650 -in cert.csr -signkey key.pem -out cert.pem  && \
	# Fix screen autocompletion
	echo "defshell -bash" > ~/.screenrc
    
COPY jupyter_notebook_config.py /root/.jupyter/

# Jupyter has issues with being run directly (https://github.com/ipython/ipython/issues/7062)
# We just add a little wrapper script.
COPY run_jupyter.sh /

# TensorBoard
EXPOSE 6006
# IPython
EXPOSE 8888

WORKDIR "/workspace"
CMD sh /run_jupyter.sh && bash 

# check if everything binded correctly (MKL, nvidia)
